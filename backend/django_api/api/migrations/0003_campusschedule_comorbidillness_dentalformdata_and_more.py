# Generated by Django 4.2.10 on 2025-07-15 21:48

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('api', '0002_dentalinformationrecord'),
    ]

    operations = [
        migrations.CreateModel(
            name='CampusSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('campus', models.CharField(choices=[('a', 'Campus A'), ('b', 'Campus B'), ('c', 'Campus C')], max_length=20, unique=True)),
                ('open_time', models.TimeField()),
                ('close_time', models.TimeField()),
                ('operating_days', models.JSONField(default=list, help_text='List of operating days')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['campus'],
            },
        ),
        migrations.CreateModel(
            name='ComorbidIllness',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_enabled', models.BooleanField(default=True)),
                ('display_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['display_order', 'label'],
            },
        ),
        migrations.CreateModel(
            name='DentalFormData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_no', models.CharField(blank=True, max_length=50, null=True)),
                ('surname', models.CharField(blank=True, max_length=100, null=True)),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('sex', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], default='Male', max_length=10)),
                ('has_toothbrush', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=3)),
                ('dentition', models.CharField(blank=True, choices=[('Satisfactory', 'Satisfactory'), ('Fair', 'Fair'), ('Poor', 'Poor')], max_length=20, null=True)),
                ('periodontal', models.CharField(blank=True, choices=[('Satisfactory', 'Satisfactory'), ('Fair', 'Fair'), ('Poor', 'Poor')], max_length=20, null=True)),
                ('occlusion', models.CharField(blank=True, choices=[('Normal', 'Normal'), ('Malocclusion', 'Malocclusion')], max_length=20, null=True)),
                ('malocclusion_severity', models.CharField(blank=True, choices=[('Mild', 'Mild'), ('Moderate', 'Moderate'), ('Severe', 'Severe')], max_length=20, null=True)),
                ('decayed_teeth', models.CharField(blank=True, max_length=100, null=True)),
                ('missing_teeth', models.CharField(blank=True, max_length=100, null=True)),
                ('filled_teeth', models.CharField(blank=True, max_length=100, null=True)),
                ('oral_hygiene', models.CharField(blank=True, max_length=100, null=True)),
                ('recommended_treatments', models.TextField(blank=True, null=True)),
                ('prevention_advice', models.TextField(blank=True, null=True)),
                ('next_appointment', models.CharField(blank=True, max_length=100, null=True)),
                ('treatment_priority', models.CharField(blank=True, max_length=100, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('examined_by', models.CharField(blank=True, max_length=100, null=True)),
                ('examiner_position', models.CharField(blank=True, max_length=100, null=True)),
                ('examiner_license', models.CharField(blank=True, max_length=50, null=True)),
                ('examiner_ptr', models.CharField(blank=True, max_length=50, null=True)),
                ('examiner_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('permanent_teeth_status', models.JSONField(blank=True, help_text='Status of permanent teeth', null=True)),
                ('temporary_teeth_status', models.JSONField(blank=True, help_text='Status of temporary teeth', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='DentalWaiver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_name', models.CharField(help_text='Full name of patient', max_length=100)),
                ('guardian_name', models.CharField(blank=True, help_text='Name of parent/guardian if patient is minor', max_length=100, null=True)),
                ('patient_signature', models.TextField(help_text='Base64-encoded patient signature image')),
                ('guardian_signature', models.TextField(blank=True, help_text='Base64-encoded parent/guardian signature image', null=True)),
                ('date_signed', models.DateField()),
                ('semester', models.CharField(blank=True, choices=[('1st_semester', 'First Semester'), ('2nd_semester', 'Second Semester'), ('summer', 'Summer Semester')], help_text='Semester period for this dental waiver', max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='DentistSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dentist_name', models.CharField(max_length=200)),
                ('campus', models.CharField(choices=[('a', 'Campus A'), ('b', 'Campus B'), ('c', 'Campus C')], max_length=20)),
                ('available_days', models.JSONField(default=list, help_text='List of available days')),
                ('time_slots', models.JSONField(default=list, help_text='List of available time slots')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['campus', 'dentist_name'],
            },
        ),
        migrations.CreateModel(
            name='DocumentRequirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(max_length=100, unique=True)),
                ('display_name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('is_required', models.BooleanField(default=True)),
                ('validity_period_months', models.IntegerField(default=6, help_text='Document validity in months')),
                ('specific_courses', models.JSONField(default=list, help_text='List of courses that require this document')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['display_name'],
            },
        ),
        migrations.CreateModel(
            name='FamilyMedicalHistoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_enabled', models.BooleanField(default=True)),
                ('display_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_name', models.CharField(max_length=100)),
                ('item_type', models.CharField(max_length=50)),
                ('quantity', models.IntegerField(default=0)),
                ('description', models.TextField(blank=True, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('last_restocked_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='MedicalDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chest_xray', models.FileField(blank=True, null=True, upload_to='medical_documents/chest_xray/')),
                ('cbc', models.FileField(blank=True, null=True, upload_to='medical_documents/cbc/')),
                ('blood_typing', models.FileField(blank=True, null=True, upload_to='medical_documents/blood_typing/')),
                ('urinalysis', models.FileField(blank=True, null=True, upload_to='medical_documents/urinalysis/')),
                ('drug_test', models.FileField(blank=True, null=True, upload_to='medical_documents/drug_test/')),
                ('hepa_b', models.FileField(blank=True, null=True, upload_to='medical_documents/hepa_b/')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('for_consultation', 'For Consultation'), ('verified', 'Verified'), ('rejected', 'Rejected'), ('issued', 'Certificate Issued')], default='pending', max_length=20)),
                ('submitted_for_review', models.BooleanField(default=False)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True, null=True)),
                ('consultation_reason', models.TextField(blank=True, help_text='Reason for consultation advice', null=True)),
                ('advised_for_consultation_at', models.DateTimeField(blank=True, help_text='When consultation was advised', null=True)),
                ('medical_certificate', models.FileField(blank=True, null=True, upload_to='medical_certificates/')),
                ('certificate_issued_at', models.DateTimeField(blank=True, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='MedicalFormData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_no', models.CharField(blank=True, max_length=50, null=True)),
                ('surname', models.CharField(blank=True, max_length=100, null=True)),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('sex', models.CharField(blank=True, max_length=10, null=True)),
                ('blood_pressure', models.CharField(blank=True, max_length=20, null=True)),
                ('pulse_rate', models.CharField(blank=True, max_length=20, null=True)),
                ('temperature', models.CharField(blank=True, max_length=20, null=True)),
                ('respiratory_rate', models.CharField(blank=True, max_length=20, null=True)),
                ('weight', models.CharField(blank=True, max_length=20, null=True)),
                ('height', models.CharField(blank=True, max_length=20, null=True)),
                ('chief_complaint', models.TextField(blank=True, null=True)),
                ('present_illness', models.TextField(blank=True, null=True)),
                ('past_medical_history', models.TextField(blank=True, null=True)),
                ('family_history', models.TextField(blank=True, null=True)),
                ('allergies', models.TextField(blank=True, null=True)),
                ('medications', models.TextField(blank=True, null=True)),
                ('general_appearance', models.TextField(blank=True, null=True)),
                ('heent', models.TextField(blank=True, help_text='Head, Eyes, Ears, Nose, Throat', null=True)),
                ('cardiovascular', models.TextField(blank=True, null=True)),
                ('respiratory', models.TextField(blank=True, null=True)),
                ('gastrointestinal', models.TextField(blank=True, null=True)),
                ('genitourinary', models.TextField(blank=True, null=True)),
                ('neurological', models.TextField(blank=True, null=True)),
                ('musculoskeletal', models.TextField(blank=True, null=True)),
                ('integumentary', models.TextField(blank=True, null=True)),
                ('diagnosis', models.TextField(blank=True, null=True)),
                ('treatment_plan', models.TextField(blank=True, null=True)),
                ('recommendations', models.TextField(blank=True, null=True)),
                ('follow_up', models.TextField(blank=True, null=True)),
                ('examined_by', models.CharField(blank=True, max_length=100, null=True)),
                ('examiner_license', models.CharField(blank=True, max_length=50, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='MedicalRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_date', models.DateTimeField(auto_now_add=True)),
                ('diagnosis', models.TextField()),
                ('treatment', models.TextField()),
                ('prescription', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PastMedicalHistoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_enabled', models.BooleanField(default=True)),
                ('display_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ProfileRequirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(max_length=100, unique=True)),
                ('display_name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('category', models.CharField(choices=[('personal', 'Personal Information'), ('health', 'Health Information'), ('emergency', 'Emergency Contact'), ('family', 'Family History')], max_length=20)),
                ('is_required', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['category', 'display_name'],
            },
        ),
        migrations.CreateModel(
            name='StaffDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signature', models.ImageField(blank=True, null=True, upload_to='staff_signatures/')),
                ('full_name', models.CharField(max_length=200)),
                ('position', models.CharField(max_length=100)),
                ('license_number', models.CharField(blank=True, max_length=50, null=True)),
                ('ptr_number', models.CharField(blank=True, max_length=50, null=True)),
                ('campus_assigned', models.CharField(choices=[('a', 'Campus A'), ('b', 'Campus B'), ('c', 'Campus C')], default='a', max_length=20)),
                ('assigned_campuses', models.CharField(default='a', help_text='Comma-separated campus codes (a,b,c)', max_length=10)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='SystemConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_requirements', models.JSONField(default=dict, help_text='Profile setup requirements configuration')),
                ('document_requirements', models.JSONField(default=dict, help_text='Medical document requirements configuration')),
                ('campus_schedules', models.JSONField(default=dict, help_text='Campus operating schedules')),
                ('dentist_schedules', models.JSONField(default=dict, help_text='Dentist availability schedules')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'System Configuration',
                'verbose_name_plural': 'System Configuration',
            },
        ),
        migrations.CreateModel(
            name='Vaccination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_enabled', models.BooleanField(default=True)),
                ('display_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Waiver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100)),
                ('date_signed', models.DateField()),
                ('signature', models.TextField(help_text='Base64-encoded signature image')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.RemoveField(
            model_name='academicsemester',
            name='academic_year',
        ),
        migrations.AlterModelOptions(
            name='academicschoolyear',
            options={'ordering': ['-academic_year']},
        ),
        migrations.AlterModelOptions(
            name='customuser',
            options={'verbose_name': 'user', 'verbose_name_plural': 'users'},
        ),
        migrations.AlterModelManagers(
            name='customuser',
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.RemoveConstraint(
            model_name='patient',
            name='api_patient_user_id_school_year_id_semester_ab980f66_uniq',
        ),
        migrations.RemoveIndex(
            model_name='patient',
            name='api_patient_user_id_0944016a',
        ),
        migrations.RemoveIndex(
            model_name='patient',
            name='api_patient_user_id_b1c93a_idx',
        ),
        migrations.RemoveIndex(
            model_name='patient',
            name='fk_patient_school_year',
        ),
        migrations.RemoveField(
            model_name='customuser',
            name='department_college',
        ),
        migrations.RemoveField(
            model_name='customuser',
            name='education_level',
        ),
        migrations.RemoveField(
            model_name='customuser',
            name='education_program',
        ),
        migrations.RemoveField(
            model_name='customuser',
            name='education_year',
        ),
        migrations.RemoveField(
            model_name='customuser',
            name='employee_position',
        ),
        migrations.AlterField(
            model_name='academicschoolyear',
            name='academic_year',
            field=models.CharField(help_text='e.g., "2025-2026"', max_length=20),
        ),
        migrations.AlterField(
            model_name='academicschoolyear',
            name='first_sem_end',
            field=models.DateField(blank=True, help_text='First semester end date', null=True),
        ),
        migrations.AlterField(
            model_name='academicschoolyear',
            name='first_sem_start',
            field=models.DateField(blank=True, help_text='First semester start date', null=True),
        ),
        migrations.AlterField(
            model_name='academicschoolyear',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='academicschoolyear',
            name='second_sem_end',
            field=models.DateField(blank=True, help_text='Second semester end date', null=True),
        ),
        migrations.AlterField(
            model_name='academicschoolyear',
            name='second_sem_start',
            field=models.DateField(blank=True, help_text='Second semester start date', null=True),
        ),
        migrations.AlterField(
            model_name='academicschoolyear',
            name='status',
            field=models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('upcoming', 'Upcoming'), ('completed', 'Completed')], default='upcoming', max_length=20),
        ),
        migrations.AlterField(
            model_name='academicschoolyear',
            name='summer_end',
            field=models.DateField(blank=True, help_text='Summer semester end date', null=True),
        ),
        migrations.AlterField(
            model_name='academicschoolyear',
            name='summer_start',
            field=models.DateField(blank=True, help_text='Summer semester start date', null=True),
        ),
        migrations.AlterField(
            model_name='appointment',
            name='campus',
            field=models.CharField(choices=[('a', 'Campus A'), ('b', 'Campus B'), ('c', 'Campus C')], default='a', max_length=20),
        ),
        migrations.AlterField(
            model_name='appointment',
            name='doctor',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='appointments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='appointment',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='appointment',
            name='is_rescheduled',
            field=models.BooleanField(default=False, help_text='Whether this appointment has been rescheduled'),
        ),
        migrations.AlterField(
            model_name='appointment',
            name='original_date',
            field=models.DateField(blank=True, help_text='Original appointment date before reschedule', null=True),
        ),
        migrations.AlterField(
            model_name='appointment',
            name='original_time',
            field=models.TimeField(blank=True, help_text='Original appointment time before reschedule', null=True),
        ),
        migrations.AlterField(
            model_name='appointment',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='api.patient'),
        ),
        migrations.AlterField(
            model_name='appointment',
            name='reschedule_reason',
            field=models.TextField(blank=True, help_text='Reason for rescheduling', null=True),
        ),
        migrations.AlterField(
            model_name='appointment',
            name='rescheduled_at',
            field=models.DateTimeField(blank=True, help_text='When the appointment was rescheduled', null=True),
        ),
        migrations.AlterField(
            model_name='appointment',
            name='rescheduled_by',
            field=models.ForeignKey(blank=True, help_text='User who rescheduled this appointment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rescheduled_appointments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='appointment',
            name='school_year',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='appointments', to='api.academicschoolyear'),
        ),
        migrations.AlterField(
            model_name='appointment',
            name='semester',
            field=models.CharField(blank=True, choices=[('1st_semester', 'First Semester'), ('2nd_semester', 'Second Semester'), ('summer', 'Summer Semester')], help_text='Semester period for this appointment', max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='appointment',
            name='status',
            field=models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('completed', 'Completed'), ('scheduled', 'Scheduled')], default='pending', max_length=20),
        ),
        migrations.AlterField(
            model_name='appointment',
            name='type',
            field=models.CharField(choices=[('medical', 'Medical'), ('dental', 'Dental')], default='medical', max_length=10),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='block_reason',
            field=models.TextField(blank=True, help_text='Reason for blocking the user', null=True),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='blocked_at',
            field=models.DateTimeField(blank=True, help_text='When the user was blocked', null=True),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='blocked_by',
            field=models.ForeignKey(blank=True, help_text='Admin who blocked this user', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blocked_users', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='date_joined',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='email_verification_token',
            field=models.UUIDField(default=uuid.uuid4, editable=False),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='first_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='first name'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='is_blocked',
            field=models.BooleanField(default=False, help_text='Block user from booking consultations'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='is_staff',
            field=models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='is_superuser',
            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='last_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='last name'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='user_type',
            field=models.CharField(choices=[('student', 'Student'), ('staff', 'Staff'), ('admin', 'Admin')], default='student', max_length=10),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='username',
            field=models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='blood_type',
            field=models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=5, null=True),
        ),
        migrations.AlterField(
            model_name='patient',
            name='civil_status',
            field=models.CharField(blank=True, choices=[('single', 'Single'), ('married', 'Married'), ('widowed', 'Widowed'), ('separated', 'Separated'), ('other', 'Other')], max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='patient',
            name='comorbid_illnesses',
            field=models.JSONField(blank=True, help_text='List of comorbid illnesses', null=True),
        ),
        migrations.AlterField(
            model_name='patient',
            name='family_medical_history',
            field=models.JSONField(blank=True, help_text='List of family medical history', null=True),
        ),
        migrations.AlterField(
            model_name='patient',
            name='gender',
            field=models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], default='Other', max_length=10),
        ),
        migrations.AlterField(
            model_name='patient',
            name='hospital_admission_details',
            field=models.TextField(blank=True, help_text='Details of hospital admission or surgery when answer is Yes', null=True),
        ),
        migrations.AlterField(
            model_name='patient',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='maintenance_medications',
            field=models.JSONField(blank=True, help_text='List of maintenance medications', null=True),
        ),
        migrations.AlterField(
            model_name='patient',
            name='nationality',
            field=models.CharField(blank=True, choices=[('Filipino', 'Filipino'), ('Foreigner', 'Foreigner'), ('Other', 'Other')], max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='patient',
            name='past_medical_history',
            field=models.JSONField(blank=True, help_text='List of past medical/surgical history', null=True),
        ),
        migrations.AlterField(
            model_name='patient',
            name='photo',
            field=models.ImageField(blank=True, null=True, upload_to='patient_photos/'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='religion',
            field=models.CharField(blank=True, choices=[('Roman Catholic', 'Roman Catholic'), ('Seventh-day Adventist', 'Seventh-day Adventist'), ('Islam', 'Islam'), ('Protestant', 'Protestant'), ('Iglesia ni Cristo', 'Iglesia ni Cristo'), ('Other', 'Other')], max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='patient',
            name='school_year',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patients', to='api.academicschoolyear'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='semester',
            field=models.CharField(blank=True, choices=[('1st_semester', 'First Semester'), ('2nd_semester', 'Second Semester'), ('summer', 'Summer Semester')], help_text='Semester period for this patient profile', max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='patient',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patient_profiles', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='patient',
            name='vaccination_history',
            field=models.JSONField(blank=True, help_text='Vaccination history for all vaccines', null=True),
        ),
        migrations.AlterUniqueTogether(
            name='patient',
            unique_together={('user', 'school_year', 'semester')},
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['user', 'school_year', 'semester'], name='api_patient_user_id_5d3deb_idx'),
        ),
        migrations.AlterModelTable(
            name='appointment',
            table=None,
        ),
        migrations.AlterModelTable(
            name='customuser',
            table=None,
        ),
        migrations.AlterModelTable(
            name='patient',
            table=None,
        ),
        migrations.DeleteModel(
            name='AcademicSemester',
        ),
        migrations.AddField(
            model_name='waiver',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='waivers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='systemconfiguration',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='staffdetails',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='staff_details', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='medicalrecord',
            name='doctor',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medical_records', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='medicalrecord',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_records', to='api.patient'),
        ),
        migrations.AddField(
            model_name='medicalrecord',
            name='school_year',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medical_records', to='api.academicschoolyear'),
        ),
        migrations.AddField(
            model_name='medicalformdata',
            name='academic_year',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medical_forms', to='api.academicschoolyear'),
        ),
        migrations.AddField(
            model_name='medicalformdata',
            name='appointment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='medical_form_data', to='api.appointment'),
        ),
        migrations.AddField(
            model_name='medicalformdata',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_forms', to='api.patient'),
        ),
        migrations.AddField(
            model_name='medicaldocument',
            name='academic_year',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='medical_documents', to='api.academicschoolyear'),
        ),
        migrations.AddField(
            model_name='medicaldocument',
            name='advised_for_consultation_by',
            field=models.ForeignKey(blank=True, help_text='Staff who advised for consultation', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='consultation_advised_documents', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='medicaldocument',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_documents', to='api.patient'),
        ),
        migrations.AddField(
            model_name='medicaldocument',
            name='reviewed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_documents', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='inventory',
            name='last_restocked_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventory_updates', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='dentistschedule',
            unique_together={('dentist_name', 'campus')},
        ),
        migrations.AddField(
            model_name='dentalwaiver',
            name='patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dental_waivers', to='api.patient'),
        ),
        migrations.AddField(
            model_name='dentalwaiver',
            name='school_year',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dental_waivers', to='api.academicschoolyear'),
        ),
        migrations.AddField(
            model_name='dentalwaiver',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dental_waivers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='dentalformdata',
            name='academic_year',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dental_forms', to='api.academicschoolyear'),
        ),
        migrations.AddField(
            model_name='dentalformdata',
            name='appointment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dental_form_data', to='api.appointment'),
        ),
        migrations.AddField(
            model_name='dentalformdata',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dental_forms', to='api.patient'),
        ),
        migrations.RemoveField(
            model_name='patient',
            name='birthday',
        ),
        migrations.RemoveField(
            model_name='patient',
            name='city_address',
        ),
        migrations.RemoveField(
            model_name='patient',
            name='course',
        ),
        migrations.RemoveField(
            model_name='patient',
            name='covid19_vaccination_status',
        ),
        migrations.RemoveField(
            model_name='patient',
            name='emergency_contact_city_address',
        ),
        migrations.RemoveField(
            model_name='patient',
            name='emergency_contact_name',
        ),
        migrations.RemoveField(
            model_name='patient',
            name='hospital_admissions',
        ),
        migrations.RemoveField(
            model_name='patient',
            name='menstrual_symptoms',
        ),
        migrations.RemoveField(
            model_name='patient',
            name='menstruation_age_began',
        ),
        migrations.RemoveField(
            model_name='patient',
            name='menstruation_irregular',
        ),
        migrations.RemoveField(
            model_name='patient',
            name='menstruation_regular',
        ),
        migrations.RemoveField(
            model_name='patient',
            name='number_of_live_children',
        ),
        migrations.RemoveField(
            model_name='patient',
            name='number_of_pregnancies',
        ),
        migrations.RemoveField(
            model_name='patient',
            name='past_conditions_this_year',
        ),
        migrations.RemoveField(
            model_name='patient',
            name='provincial_address',
        ),
        migrations.RemoveField(
            model_name='patient',
            name='record_completion_status',
        ),
        migrations.RemoveField(
            model_name='patient',
            name='semester_id',
        ),
        migrations.RemoveField(
            model_name='patient',
            name='sex',
        ),
        migrations.RemoveField(
            model_name='patient',
            name='staff_notes',
        ),
        migrations.RemoveField(
            model_name='patient',
            name='surname',
        ),
        migrations.RemoveField(
            model_name='patient',
            name='uhs_template_compliant',
        ),
        migrations.RemoveField(
            model_name='patient',
            name='year_level',
        ),
        migrations.AddConstraint(
            model_name='waiver',
            constraint=models.UniqueConstraint(fields=('user',), name='unique_waiver_per_user'),
        ),
        migrations.AddConstraint(
            model_name='staffdetails',
            constraint=models.UniqueConstraint(fields=('user',), name='unique_staff_details_per_user'),
        ),
        migrations.AlterUniqueTogether(
            name='medicalformdata',
            unique_together={('patient', 'appointment')},
        ),
        migrations.AddConstraint(
            model_name='medicaldocument',
            constraint=models.UniqueConstraint(fields=('patient', 'academic_year'), name='unique_medical_document_per_patient_year'),
        ),
        migrations.AddConstraint(
            model_name='dentalwaiver',
            constraint=models.UniqueConstraint(fields=('user', 'school_year', 'semester'), name='unique_dental_waiver_per_user_semester'),
        ),
        migrations.AlterUniqueTogether(
            name='dentalformdata',
            unique_together={('patient', 'appointment')},
        ),
    ]
