# Generated by Django 5.2.4 on 2025-07-19 11:12

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicSchoolYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_year', models.CharField(help_text='e.g., "2025-2026"', max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_current', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('upcoming', 'Upcoming'), ('completed', 'Completed')], default='upcoming', max_length=20)),
                ('first_sem_start', models.DateField(blank=True, help_text='First semester start date', null=True)),
                ('first_sem_end', models.DateField(blank=True, help_text='First semester end date', null=True)),
                ('second_sem_start', models.DateField(blank=True, help_text='Second semester start date', null=True)),
                ('second_sem_end', models.DateField(blank=True, help_text='Second semester end date', null=True)),
                ('summer_start', models.DateField(blank=True, help_text='Summer semester start date', null=True)),
                ('summer_end', models.DateField(blank=True, help_text='Summer semester end date', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'api_academicschoolyear',
                'ordering': ['-academic_year'],
            },
        ),
        migrations.CreateModel(
            name='CampusSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('campus', models.CharField(choices=[('a', 'Campus A'), ('b', 'Campus B'), ('c', 'Campus C')], max_length=20, unique=True)),
                ('open_time', models.TimeField()),
                ('close_time', models.TimeField()),
                ('operating_days', models.JSONField(default=list, help_text='List of operating days')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['campus'],
            },
        ),
        migrations.CreateModel(
            name='ComorbidIllness',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_enabled', models.BooleanField(default=True)),
                ('display_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['display_order', 'label'],
            },
        ),
        migrations.CreateModel(
            name='DentalMedicineSupply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the medicine or supply', max_length=100)),
                ('type', models.CharField(choices=[('medicine', 'Medicine'), ('anesthetic', 'Anesthetic'), ('antibiotic', 'Antibiotic'), ('dental_supply', 'Dental Supply'), ('equipment', 'Equipment'), ('material', 'Material')], default='medicine', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Description or notes about the item', null=True)),
                ('unit', models.CharField(default='pcs', help_text='Unit of measurement (e.g., mg, ml, pcs)', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this item is available for use')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Dental Medicine/Supply',
                'verbose_name_plural': 'Dental Medicines/Supplies',
                'ordering': ['type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DocumentRequirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(max_length=100, unique=True)),
                ('display_name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('is_required', models.BooleanField(default=True)),
                ('validity_period_months', models.IntegerField(default=6, help_text='Document validity in months')),
                ('specific_courses', models.JSONField(default=list, help_text='List of courses that require this document')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['display_name'],
            },
        ),
        migrations.CreateModel(
            name='FamilyMedicalHistoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_enabled', models.BooleanField(default=True)),
                ('display_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PastMedicalHistoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_enabled', models.BooleanField(default=True)),
                ('display_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ProfileRequirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(max_length=100, unique=True)),
                ('display_name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('category', models.CharField(choices=[('personal', 'Personal Information'), ('health', 'Health Information'), ('emergency', 'Emergency Contact'), ('family', 'Family History')], max_length=20)),
                ('is_required', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['category', 'display_name'],
            },
        ),
        migrations.CreateModel(
            name='Vaccination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_enabled', models.BooleanField(default=True)),
                ('display_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('grade_level', models.CharField(blank=True, max_length=50, null=True)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('email_verification_token', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('email_verification_sent_at', models.DateTimeField(blank=True, null=True)),
                ('user_type', models.CharField(choices=[('student', 'Student'), ('staff', 'Staff'), ('admin', 'Admin')], default='student', max_length=10)),
                ('middle_name', models.CharField(blank=True, max_length=150, null=True)),
                ('is_blocked', models.BooleanField(default=False, help_text='Block user from booking consultations')),
                ('blocked_at', models.DateTimeField(blank=True, help_text='When the user was blocked', null=True)),
                ('block_reason', models.TextField(blank=True, help_text='Reason for blocking the user', null=True)),
                ('education_level', models.CharField(blank=True, max_length=20, null=True)),
                ('education_year', models.IntegerField(blank=True, null=True)),
                ('education_program', models.CharField(blank=True, max_length=200, null=True)),
                ('department_college', models.CharField(blank=True, max_length=200, null=True)),
                ('employee_position', models.CharField(blank=True, max_length=200, null=True)),
                ('blocked_by', models.ForeignKey(blank=True, help_text='Admin who blocked this user', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blocked_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_date', models.DateField()),
                ('appointment_time', models.TimeField()),
                ('purpose', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('completed', 'Completed'), ('scheduled', 'Scheduled')], default='pending', max_length=20)),
                ('notes', models.TextField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True, null=True)),
                ('type', models.CharField(choices=[('medical', 'Medical'), ('dental', 'Dental')], default='medical', max_length=10)),
                ('concern', models.TextField(blank=True, null=True)),
                ('campus', models.CharField(choices=[('a', 'Campus A'), ('b', 'Campus B'), ('c', 'Campus C')], default='a', max_length=20)),
                ('semester', models.CharField(blank=True, choices=[('1st_semester', 'First Semester'), ('2nd_semester', 'Second Semester'), ('summer', 'Summer Semester')], help_text='Semester period for this appointment', max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_rescheduled', models.BooleanField(default=False, help_text='Whether this appointment has been rescheduled')),
                ('rescheduled_at', models.DateTimeField(blank=True, help_text='When the appointment was rescheduled', null=True)),
                ('original_date', models.DateField(blank=True, help_text='Original appointment date before reschedule', null=True)),
                ('original_time', models.TimeField(blank=True, help_text='Original appointment time before reschedule', null=True)),
                ('reschedule_reason', models.TextField(blank=True, help_text='Reason for rescheduling', null=True)),
                ('doctor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='appointments', to=settings.AUTH_USER_MODEL)),
                ('rescheduled_by', models.ForeignKey(blank=True, help_text='User who rescheduled this appointment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rescheduled_appointments', to=settings.AUTH_USER_MODEL)),
                ('school_year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='appointments', to='api.academicschoolyear')),
            ],
        ),
        migrations.CreateModel(
            name='DentistSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dentist_name', models.CharField(max_length=200)),
                ('campus', models.CharField(choices=[('a', 'Campus A'), ('b', 'Campus B'), ('c', 'Campus C')], max_length=20)),
                ('available_days', models.JSONField(default=list, help_text='List of available days')),
                ('time_slots', models.JSONField(default=list, help_text='List of available time slots')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['campus', 'dentist_name'],
                'unique_together': {('dentist_name', 'campus')},
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_name', models.CharField(max_length=100)),
                ('item_type', models.CharField(max_length=50)),
                ('quantity', models.IntegerField(default=0)),
                ('description', models.TextField(blank=True, null=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('last_restocked_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_restocked_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventory_updates', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(max_length=20)),
                ('name', models.CharField(max_length=100)),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('suffix', models.CharField(blank=True, max_length=20, null=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='patient_photos/')),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], default='Other', max_length=10)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('contact_number', models.CharField(blank=True, max_length=20, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('city_municipality', models.CharField(blank=True, max_length=100, null=True)),
                ('barangay', models.CharField(blank=True, max_length=100, null=True)),
                ('street', models.CharField(blank=True, max_length=200, null=True)),
                ('blood_type', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=5, null=True)),
                ('religion', models.CharField(blank=True, choices=[('Roman Catholic', 'Roman Catholic'), ('Seventh-day Adventist', 'Seventh-day Adventist'), ('Islam', 'Islam'), ('Protestant', 'Protestant'), ('Iglesia ni Cristo', 'Iglesia ni Cristo'), ('Other', 'Other')], max_length=50, null=True)),
                ('nationality', models.CharField(blank=True, choices=[('Filipino', 'Filipino'), ('Foreigner', 'Foreigner'), ('Other', 'Other')], max_length=50, null=True)),
                ('civil_status', models.CharField(blank=True, choices=[('single', 'Single'), ('married', 'Married'), ('widowed', 'Widowed'), ('separated', 'Separated'), ('other', 'Other')], max_length=20, null=True)),
                ('emergency_contact_surname', models.CharField(blank=True, max_length=100, null=True)),
                ('emergency_contact_first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('emergency_contact_middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('emergency_contact_number', models.CharField(blank=True, max_length=20, null=True)),
                ('emergency_contact_relationship', models.CharField(blank=True, max_length=50, null=True)),
                ('emergency_contact_address', models.TextField(blank=True, null=True)),
                ('emergency_contact_barangay', models.CharField(blank=True, max_length=100, null=True)),
                ('emergency_contact_street', models.CharField(blank=True, max_length=200, null=True)),
                ('comorbid_illnesses', models.JSONField(blank=True, help_text='List of comorbid illnesses', null=True)),
                ('maintenance_medications', models.JSONField(blank=True, help_text='List of maintenance medications', null=True)),
                ('vaccination_history', models.JSONField(blank=True, help_text='Vaccination history for all vaccines', null=True)),
                ('past_medical_history', models.JSONField(blank=True, help_text='List of past medical/surgical history', null=True)),
                ('hospital_admission_or_surgery', models.BooleanField(default=False)),
                ('hospital_admission_details', models.TextField(blank=True, help_text='Details of hospital admission or surgery when answer is Yes', null=True)),
                ('family_medical_history', models.JSONField(blank=True, help_text='List of family medical history', null=True)),
                ('semester', models.CharField(blank=True, choices=[('1st_semester', 'First Semester'), ('2nd_semester', 'Second Semester'), ('summer', 'Summer Semester')], help_text='Semester period for this patient profile', max_length=20, null=True)),
                ('allergies', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('surname', models.CharField(blank=True, max_length=100, null=True)),
                ('sex', models.CharField(blank=True, max_length=10, null=True)),
                ('course', models.CharField(blank=True, max_length=200, null=True)),
                ('year_level', models.CharField(blank=True, max_length=50, null=True)),
                ('birthday', models.DateField(blank=True, null=True)),
                ('city_address', models.TextField(blank=True, null=True)),
                ('provincial_address', models.TextField(blank=True, null=True)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=200, null=True)),
                ('emergency_contact_city_address', models.TextField(blank=True, null=True)),
                ('covid19_vaccination_status', models.CharField(blank=True, max_length=50, null=True)),
                ('menstruation_age_began', models.IntegerField(blank=True, null=True)),
                ('menstruation_regular', models.BooleanField(default=False)),
                ('menstruation_irregular', models.BooleanField(default=False)),
                ('number_of_pregnancies', models.IntegerField(blank=True, null=True)),
                ('number_of_live_children', models.IntegerField(blank=True, null=True)),
                ('menstrual_symptoms', models.TextField(blank=True, null=True)),
                ('past_conditions_this_year', models.TextField(blank=True, null=True)),
                ('hospital_admissions', models.TextField(blank=True, null=True)),
                ('uhs_template_compliant', models.BooleanField(default=False)),
                ('record_completion_status', models.CharField(default='incomplete', max_length=20)),
                ('staff_notes', models.TextField(blank=True, null=True)),
                ('semester_id', models.IntegerField(blank=True, null=True)),
                ('school_year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patients', to='api.academicschoolyear')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patient_profiles', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MedicalRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_date', models.DateTimeField(auto_now_add=True)),
                ('diagnosis', models.TextField()),
                ('treatment', models.TextField()),
                ('prescription', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('doctor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medical_records', to=settings.AUTH_USER_MODEL)),
                ('school_year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medical_records', to='api.academicschoolyear')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_records', to='api.patient')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalFormData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_no', models.CharField(blank=True, max_length=50, null=True)),
                ('surname', models.CharField(blank=True, max_length=100, null=True)),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('sex', models.CharField(blank=True, max_length=10, null=True)),
                ('blood_pressure', models.CharField(blank=True, max_length=20, null=True)),
                ('pulse_rate', models.CharField(blank=True, max_length=20, null=True)),
                ('temperature', models.CharField(blank=True, max_length=20, null=True)),
                ('respiratory_rate', models.CharField(blank=True, max_length=20, null=True)),
                ('weight', models.CharField(blank=True, max_length=20, null=True)),
                ('height', models.CharField(blank=True, max_length=20, null=True)),
                ('chief_complaint', models.TextField(blank=True, null=True)),
                ('present_illness', models.TextField(blank=True, null=True)),
                ('past_medical_history', models.TextField(blank=True, null=True)),
                ('family_history', models.TextField(blank=True, null=True)),
                ('allergies', models.TextField(blank=True, null=True)),
                ('medications', models.TextField(blank=True, null=True)),
                ('general_appearance', models.TextField(blank=True, null=True)),
                ('heent', models.TextField(blank=True, help_text='Head, Eyes, Ears, Nose, Throat', null=True)),
                ('cardiovascular', models.TextField(blank=True, null=True)),
                ('respiratory', models.TextField(blank=True, null=True)),
                ('gastrointestinal', models.TextField(blank=True, null=True)),
                ('genitourinary', models.TextField(blank=True, null=True)),
                ('neurological', models.TextField(blank=True, null=True)),
                ('musculoskeletal', models.TextField(blank=True, null=True)),
                ('integumentary', models.TextField(blank=True, null=True)),
                ('diagnosis', models.TextField(blank=True, null=True)),
                ('treatment_plan', models.TextField(blank=True, null=True)),
                ('recommendations', models.TextField(blank=True, null=True)),
                ('follow_up', models.TextField(blank=True, null=True)),
                ('examined_by', models.CharField(blank=True, max_length=100, null=True)),
                ('examiner_license', models.CharField(blank=True, max_length=50, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('academic_year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medical_forms', to='api.academicschoolyear')),
                ('appointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='medical_form_data', to='api.appointment')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_forms', to='api.patient')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chest_xray', models.FileField(blank=True, null=True, upload_to='medical_documents/chest_xray/')),
                ('cbc', models.FileField(blank=True, null=True, upload_to='medical_documents/cbc/')),
                ('blood_typing', models.FileField(blank=True, null=True, upload_to='medical_documents/blood_typing/')),
                ('urinalysis', models.FileField(blank=True, null=True, upload_to='medical_documents/urinalysis/')),
                ('drug_test', models.FileField(blank=True, null=True, upload_to='medical_documents/drug_test/')),
                ('hepa_b', models.FileField(blank=True, null=True, upload_to='medical_documents/hepa_b/')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('for_consultation', 'For Consultation'), ('verified', 'Verified'), ('rejected', 'Rejected'), ('issued', 'Certificate Issued')], default='pending', max_length=20)),
                ('submitted_for_review', models.BooleanField(default=False)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True, null=True)),
                ('consultation_reason', models.TextField(blank=True, help_text='Reason for consultation advice', null=True)),
                ('advised_for_consultation_at', models.DateTimeField(blank=True, help_text='When consultation was advised', null=True)),
                ('medical_certificate', models.FileField(blank=True, null=True, upload_to='medical_certificates/')),
                ('certificate_issued_at', models.DateTimeField(blank=True, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('academic_year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='medical_documents', to='api.academicschoolyear')),
                ('advised_for_consultation_by', models.ForeignKey(blank=True, help_text='Staff who advised for consultation', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='consultation_advised_documents', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_documents', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_documents', to='api.patient')),
            ],
        ),
        migrations.CreateModel(
            name='DentalWaiver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_name', models.CharField(help_text='Full name of patient', max_length=100)),
                ('guardian_name', models.CharField(blank=True, help_text='Name of parent/guardian if patient is minor', max_length=100, null=True)),
                ('patient_signature', models.TextField(help_text='Base64-encoded patient signature image')),
                ('guardian_signature', models.TextField(blank=True, help_text='Base64-encoded parent/guardian signature image', null=True)),
                ('date_signed', models.DateField()),
                ('semester', models.CharField(blank=True, choices=[('1st_semester', 'First Semester'), ('2nd_semester', 'Second Semester'), ('summer', 'Summer Semester')], help_text='Semester period for this dental waiver', max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dental_waivers', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dental_waivers', to='api.patient')),
            ],
        ),
        migrations.CreateModel(
            name='DentalInformationRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester', models.CharField(choices=[('1st_semester', 'First Semester'), ('2nd_semester', 'Second Semester'), ('summer', 'Summer')], default='1st_semester', max_length=20)),
                ('patient_name', models.CharField(max_length=255)),
                ('age', models.IntegerField()),
                ('sex', models.CharField(max_length=20)),
                ('education_level', models.CharField(blank=True, choices=[('preschool', 'Preschool'), ('elementary', 'Elementary'), ('high_school', 'High School'), ('senior_high', 'Senior High School'), ('college', 'College')], max_length=50, null=True)),
                ('year_level', models.CharField(blank=True, max_length=50, null=True)),
                ('course', models.CharField(blank=True, max_length=200, null=True)),
                ('year_section', models.CharField(blank=True, max_length=100, null=True)),
                ('date', models.DateField()),
                ('name_of_previous_dentist', models.CharField(blank=True, max_length=255, null=True)),
                ('last_dental_visit', models.CharField(blank=True, max_length=255, null=True)),
                ('date_of_last_cleaning', models.CharField(blank=True, max_length=255, null=True)),
                ('oral_hygiene_instructions', models.BooleanField(blank=True, null=True)),
                ('gums_bleed_brushing', models.BooleanField(blank=True, null=True)),
                ('teeth_sensitive_hot_cold', models.BooleanField(blank=True, null=True)),
                ('feel_pain_teeth', models.BooleanField(blank=True, null=True)),
                ('difficult_extractions_past', models.BooleanField(blank=True, null=True)),
                ('orthodontic_treatment', models.BooleanField(blank=True, null=True)),
                ('prolonged_bleeding_extractions', models.BooleanField(blank=True, null=True)),
                ('frequent_headaches', models.BooleanField(blank=True, null=True)),
                ('clench_grind_teeth', models.BooleanField(blank=True, null=True)),
                ('allergic_to_following', models.BooleanField(blank=True, null=True)),
                ('allergic_penicillin', models.BooleanField(default=False)),
                ('allergic_amoxicillin', models.BooleanField(default=False)),
                ('allergic_local_anesthetic', models.BooleanField(default=False)),
                ('allergic_sulfa_drugs', models.BooleanField(default=False)),
                ('allergic_latex', models.BooleanField(default=False)),
                ('allergic_others', models.CharField(blank=True, max_length=255, null=True)),
                ('is_woman', models.BooleanField(default=False)),
                ('menstruation_today', models.BooleanField(blank=True, null=True)),
                ('pregnant', models.BooleanField(blank=True, null=True)),
                ('taking_birth_control', models.BooleanField(blank=True, null=True)),
                ('smoke', models.BooleanField(blank=True, null=True)),
                ('under_medical_treatment', models.BooleanField(blank=True, null=True)),
                ('medical_treatment_condition', models.CharField(blank=True, max_length=255, null=True)),
                ('hospitalized', models.BooleanField(blank=True, null=True)),
                ('hospitalization_when_why', models.CharField(blank=True, max_length=255, null=True)),
                ('taking_prescription_medication', models.BooleanField(blank=True, null=True)),
                ('prescription_medication_details', models.CharField(blank=True, max_length=255, null=True)),
                ('high_blood_pressure', models.BooleanField(default=False)),
                ('low_blood_pressure', models.BooleanField(default=False)),
                ('epilepsy_convulsions', models.BooleanField(default=False)),
                ('aids_hiv_positive', models.BooleanField(default=False)),
                ('sexually_transmitted_disease', models.BooleanField(default=False)),
                ('stomach_trouble_ulcers', models.BooleanField(default=False)),
                ('fainting_seizure', models.BooleanField(default=False)),
                ('rapid_weight_loss', models.BooleanField(default=False)),
                ('radiation_therapy', models.BooleanField(default=False)),
                ('joint_replacement_implant', models.BooleanField(default=False)),
                ('heart_surgery', models.BooleanField(default=False)),
                ('heart_attack', models.BooleanField(default=False)),
                ('thyroid_problem', models.BooleanField(default=False)),
                ('heart_disease', models.BooleanField(default=False)),
                ('heart_murmur', models.BooleanField(default=False)),
                ('hepatitis_liver_disease', models.BooleanField(default=False)),
                ('rheumatic_fever', models.BooleanField(default=False)),
                ('hay_fever_allergies', models.BooleanField(default=False)),
                ('respiratory_problems', models.BooleanField(default=False)),
                ('hepatitis_jaundice', models.BooleanField(default=False)),
                ('tuberculosis', models.BooleanField(default=False)),
                ('swollen_ankles', models.BooleanField(default=False)),
                ('kidney_disease', models.BooleanField(default=False)),
                ('diabetes', models.BooleanField(default=False)),
                ('chest_pain', models.BooleanField(default=False)),
                ('stroke', models.BooleanField(default=False)),
                ('cancer_tumors', models.BooleanField(default=False)),
                ('anemia', models.BooleanField(default=False)),
                ('angina', models.BooleanField(default=False)),
                ('asthma', models.BooleanField(default=False)),
                ('emphysema', models.BooleanField(default=False)),
                ('blood_diseases', models.BooleanField(default=False)),
                ('head_injuries', models.BooleanField(default=False)),
                ('arthritis_rheumatism', models.BooleanField(default=False)),
                ('other_conditions', models.CharField(blank=True, max_length=255, null=True)),
                ('patient_signature', models.CharField(blank=True, max_length=255, null=True)),
                ('signature_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('school_year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.academicschoolyear')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dental_information_records', to='api.patient')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DentalFormData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_no', models.CharField(blank=True, max_length=50, null=True)),
                ('surname', models.CharField(blank=True, max_length=100, null=True)),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('sex', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], default='Male', max_length=10)),
                ('has_toothbrush', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=3)),
                ('dentition', models.CharField(blank=True, choices=[('Satisfactory', 'Satisfactory'), ('Fair', 'Fair'), ('Poor', 'Poor')], max_length=20, null=True)),
                ('periodontal', models.CharField(blank=True, choices=[('Satisfactory', 'Satisfactory'), ('Fair', 'Fair'), ('Poor', 'Poor')], max_length=20, null=True)),
                ('occlusion', models.CharField(blank=True, choices=[('Normal', 'Normal'), ('Malocclusion', 'Malocclusion')], max_length=20, null=True)),
                ('malocclusion_severity', models.CharField(blank=True, choices=[('Mild', 'Mild'), ('Moderate', 'Moderate'), ('Severe', 'Severe')], max_length=20, null=True)),
                ('decayed_teeth', models.CharField(blank=True, max_length=100, null=True)),
                ('missing_teeth', models.CharField(blank=True, max_length=100, null=True)),
                ('filled_teeth', models.CharField(blank=True, max_length=100, null=True)),
                ('oral_hygiene', models.CharField(blank=True, max_length=100, null=True)),
                ('recommended_treatments', models.TextField(blank=True, null=True)),
                ('prevention_advice', models.TextField(blank=True, null=True)),
                ('next_appointment', models.CharField(blank=True, max_length=100, null=True)),
                ('treatment_priority', models.CharField(blank=True, max_length=100, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('examined_by', models.CharField(blank=True, max_length=100, null=True)),
                ('examiner_position', models.CharField(blank=True, max_length=100, null=True)),
                ('examiner_license', models.CharField(blank=True, max_length=50, null=True)),
                ('examiner_ptr', models.CharField(blank=True, max_length=50, null=True)),
                ('examiner_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('permanent_teeth_status', models.JSONField(blank=True, help_text='Status of permanent teeth', null=True)),
                ('temporary_teeth_status', models.JSONField(blank=True, help_text='Status of temporary teeth', null=True)),
                ('used_medicines', models.JSONField(blank=True, help_text='List of medicines used during the appointment', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('academic_year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dental_forms', to='api.academicschoolyear')),
                ('appointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dental_form_data', to='api.appointment')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dental_forms', to='api.patient')),
            ],
        ),
        migrations.AddField(
            model_name='appointment',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='api.patient'),
        ),
        migrations.CreateModel(
            name='StaffDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signature', models.ImageField(blank=True, null=True, upload_to='staff_signatures/')),
                ('full_name', models.CharField(max_length=200)),
                ('position', models.CharField(max_length=100)),
                ('license_number', models.CharField(blank=True, max_length=50, null=True)),
                ('ptr_number', models.CharField(blank=True, max_length=50, null=True)),
                ('campus_assigned', models.CharField(choices=[('a', 'Campus A'), ('b', 'Campus B'), ('c', 'Campus C')], default='a', max_length=20)),
                ('assigned_campuses', models.CharField(default='a', help_text='Comma-separated campus codes (a,b,c)', max_length=10)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='staff_details', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SystemConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_requirements', models.JSONField(default=dict, help_text='Profile setup requirements configuration')),
                ('document_requirements', models.JSONField(default=dict, help_text='Medical document requirements configuration')),
                ('campus_schedules', models.JSONField(default=dict, help_text='Campus operating schedules')),
                ('dentist_schedules', models.JSONField(default=dict, help_text='Dentist availability schedules')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'System Configuration',
                'verbose_name_plural': 'System Configuration',
            },
        ),
        migrations.CreateModel(
            name='Waiver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100)),
                ('date_signed', models.DateField()),
                ('signature', models.TextField(help_text='Base64-encoded signature image')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='waivers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['user', 'school_year', 'semester'], name='api_patient_user_id_5d3deb_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='patient',
            unique_together={('user', 'school_year', 'semester')},
        ),
        migrations.AlterUniqueTogether(
            name='medicalformdata',
            unique_together={('patient', 'appointment')},
        ),
        migrations.AddConstraint(
            model_name='medicaldocument',
            constraint=models.UniqueConstraint(fields=('patient', 'academic_year'), name='unique_medical_document_per_patient_year'),
        ),
        migrations.AddConstraint(
            model_name='dentalwaiver',
            constraint=models.UniqueConstraint(fields=('user', 'semester'), name='unique_dental_waiver_per_user_semester'),
        ),
        migrations.AlterUniqueTogether(
            name='dentalinformationrecord',
            unique_together={('patient', 'school_year', 'semester')},
        ),
        migrations.AlterUniqueTogether(
            name='dentalformdata',
            unique_together={('patient', 'appointment')},
        ),
        migrations.AddConstraint(
            model_name='staffdetails',
            constraint=models.UniqueConstraint(fields=('user',), name='unique_staff_details_per_user'),
        ),
        migrations.AddConstraint(
            model_name='waiver',
            constraint=models.UniqueConstraint(fields=('user',), name='unique_waiver_per_user'),
        ),
    ]
